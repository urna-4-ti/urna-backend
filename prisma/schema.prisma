// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String  @id @default(uuid())
  name         String
  role         Roles
  enrollment   String  @unique
  email        String  @unique
  hashPassword String
  password     String
  class        Classes
  Vote         Vote[]

  @@index([id, enrollment])
}

model Candidate {
  id               String         @id @default(uuid())
  name             String
  cod              Int            @unique
  picPath          String
  description      String
  politicalPartyId String
  PoliticalParty   PoliticalParty @relation(fields: [politicalPartyId], references: [id], onDelete: Cascade)
  Vote             Vote[]
  Election         Election?      @relation(fields: [electionId], references: [id])
  electionId       String?
}

model PoliticalType {
  id          String @id @default(uuid())
  name        String
  cod         Int    @unique
  description String
}

model PoliticalParty {
  id           String  @id @default(uuid())
  name         String
  class        Classes
  photoUrl     String
  governmentId String?

  candidates Candidate[]
  government Government? @relation(fields: [governmentId], references: [id], onDelete: Cascade)
}

model PoliticalRegime {
  id         String    @id @default(uuid())
  name       NamesPR
  cod        Int       @unique
  Vote       Vote[]
  Election   Election? @relation(fields: [electionId], references: [id])
  electionId String?
}

model Government {
  id         String    @id @default(uuid())
  cod        Int
  name       String
  Vote       Vote[]
  Election   Election? @relation(fields: [electionId], references: [id])
  electionId String?

  PoliticalParty PoliticalParty[]
}

model Election {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  class  Classes
  status electionStatus @default(CREATED)

  candidates       Candidate[]
  politicalRegimes PoliticalRegime[]
  governmentSystem Government[]

  votes Vote[]
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  governmentVote Government? @relation(fields: [governmentId], references: [id], onDelete: Cascade)
  governmentId   String?

  politicalRegimeVote PoliticalRegime? @relation(fields: [politicalRegimeId], references: [id], onDelete: Cascade)
  politicalRegimeId   String?

  candidateVote Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId   String?

  class      Classes
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  electionId String

  userEnrollment String

  whiteVote Boolean?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([id, governmentId, politicalRegimeId, candidateId, whiteVote])
}

enum Roles {
  ADMIN
  VOTER
}

enum Classes {
  TI_1
  TI_2
  TI_3
  TI_4
  TQ_1
  TQ_2
  TQ_3
  TQ_4
  TMA_1
  TMA_2
  TMA_3
  TMA_4
  TA_1
  TA_2
  TA_3
  TA_4
  ADMIN
}

enum NamesPR {
  Parlamentarismo
  Presidencialismo
  SemiPresidencialismo
}

enum electionStatus {
  CREATED
  IN_PROGRESS
  DONE
}
